# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-YwJcjfhYdM3HpK3X5bs4hPjE9WSEHBt
"""

import streamlit as st
import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# URL to dataset
DATA_URL = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"

@st.cache_data
def load_data():
    df = pd.read_csv(DATA_URL, header=None)
    df.columns = [
        "Pregnancies", "Glucose", "BloodPressure", "SkinThickness", "Insulin",
        "BMI", "DiabetesPedigreeFunction", "Age", "Outcome"
    ]
    return df

data = load_data()

st.title("Pima Indian Diabetes Predictor")
st.write("This model predicts whether a person is diabetic or not based on medical attributes.")

# Train model
@st.cache_resource
def train_model():
    X = data.drop("Outcome", axis=1)
    y = data["Outcome"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

    model = LogisticRegression(max_iter=200)
    model.fit(X_train, y_train)

    joblib.dump(model, "model.pkl")  # Save model
    return model, accuracy_score(y_test, model.predict(X_test))

model, acc = train_model()

st.sidebar.header("Input Features")
def user_input():
    return pd.DataFrame([{
        "Pregnancies": st.sidebar.number_input("Pregnancies", 0, 20, 1),
        "Glucose": st.sidebar.slider("Glucose", 0, 200, 120),
        "BloodPressure": st.sidebar.slider("BloodPressure", 0, 140, 70),
        "SkinThickness": st.sidebar.slider("SkinThickness", 0, 100, 20),
        "Insulin": st.sidebar.slider("Insulin", 0, 900, 79),
        "BMI": st.sidebar.slider("BMI", 0.0, 70.0, 33.6),
        "DiabetesPedigreeFunction": st.sidebar.slider("DPF", 0.0, 3.0, 0.5),
        "Age": st.sidebar.slider("Age", 21, 100, 33),
    }])

input_df = user_input()

if st.button("Predict"):
    prediction = model.predict(input_df)[0]
    st.subheader("Prediction:")
    st.success("Diabetic" if prediction == 1 else "Not Diabetic")

    st.subheader("Model Accuracy:")
    st.write(f"{acc:.2%}")

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit joblib scikit-learn pandas